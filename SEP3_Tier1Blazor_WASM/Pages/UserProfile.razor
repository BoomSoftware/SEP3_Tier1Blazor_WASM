@inject IUserManger UserManger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider Authentication
@inject IFileUpload FileUpload

@attribute [Authorize]
@page "/profile/{UserArgument}/"

@using SEP3_Tier1Blazor_WASM.Data
@using SEP3_Tier1Blazor_WASM.Data.UserData

@if (user != null)
{
    <div class="container">
        <header style="background-image: url(@bgSrc)">
            <AuthorizeView Resource="@id" Policy="CurrentLogged">
                <InputFile OnChange="OnInputFileChanged"/>
            </AuthorizeView>
        </header>
        <main>
            <div class="row">
                <div class="left col-lg-4">
                    <div class="photo-left">
                        <img class="profile-avatar" src=@avatarSrc />
                    </div>
                    <h4 class="name">@user.Name</h4>
                    <p class="info">@user.City</p>

                    @if (user.Address != null)
                    {
                        <p class="info">@user.Address.Street @user.Address.Number</p>
                    }

                    <div class="stats row">
                        <div class="stat col-xs-4" style="padding-right: 50px;">
                            <p class="number-stat">####</p>
                            <p class="desc-stat">Friends</p>
                        </div>
                        <div class="stat col-xs-4">
                            <p class="number-stat">####</p>
                            <p class="desc-stat">Posts</p>
                        </div>
                        <div class="stat col-xs-4" style="padding-left: 50px;">
                            <p class="number-stat">####</p>
                            <p class="desc-stat">Points</p>
                        </div>
                    </div>
                    <p class="desc">@user.Description</p>
                </div>
                <div class="right col-lg-8">
                    <ul class="profile-nav">
                        <li>Own Posts</li>
                        <li>Liked Posts</li>
                        <li>About</li>
                    </ul>

                    @* <span class="follow" @onclick=OnAddNewFriend>Add Friend</span> *@
                    <AuthorizeView Resource="@id" Policy="CurrentLogged">
                        <span class="follow" @onclick=OnDeleteAccount>Delete Account</span>
                    </AuthorizeView>
                    
                   
                    @* <span class="follow" @onclick=OnReportUser>Report User</span> *@
                    <div class="row gallery">
                        @*                           @foreach(int postId in user.PostIds) *@
                        @*                           { *@
                        @*                               <div class="col-md-12"> *@
                        @*                                   <Post PostID="1"/> *@
                        @*                               </div> *@
                        @*                           } *@
                    </div>
                </div>
            </div>
        </main>
    </div>
    
}


@code {

    [Parameter]
    public string UserArgument { get; set; }

    private User user;
    private int id;
    private string avatarSrc;
    private string bgSrc;


    protected override async Task OnInitializedAsync()
    {
        string[] tempUser = UserArgument.Split('.');
        if (tempUser.Length == 3)
            id = Int32.Parse(tempUser[2]);
        if (tempUser.Length == 2)
            id = Int32.Parse(tempUser[1]);

        user = await UserManger.GetUser(StaticFunctions.GetLoggedUserId(await Authentication.GetAuthenticationStateAsync()),id);
        
            avatarSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(user.Avatar));
            bgSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(user.ProfileBackground));
    }

    private void OnDeleteAccount()
    {
        if (UserManger.RemoveUser(id).IsCompletedSuccessfully)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
    //display error connection message
        }
    }

    // private void OnAddNewFriend()
    // {
    //     if (JS.InvokeVoidAsync("sendName", new object[] {((UserManagerRest) UserManger).CurrentLogged.UserId, id}).IsCompletedSuccessfully)
    //     {
    //         //request sent successfully
    //     }
    //
    //     else
    //     {
    //         //server error
    //     }
    // }
    //
    // private void OnReportUser()
    // {
    //     if (UserManger.ReportUser(id).IsCompletedSuccessfully)
    //     {
    // //display successful message
    //     }
    //
    //     else
    //     {
    // //display error connection message
    //     }
    

    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        Console.WriteLine("+++++++++++++++++++++++++++++ size: " + files.FirstOrDefault().Data.Length);

        User editedUser = new User();
        
        editedUser.Id = id;
        editedUser.ProfileBackground = await FileUpload.ConvertFile(files.FirstOrDefault());
        
        await UserManger.EditUser(editedUser, StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync()));
        StateHasChanged();
    }
    









}