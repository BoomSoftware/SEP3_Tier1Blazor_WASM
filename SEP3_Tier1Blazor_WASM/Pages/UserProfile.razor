@page "/profile/{UserArgument}/"
@attribute [Authorize]
@inject IUserManger UserManger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider Authentication
@inject IFileUpload FileUpload
@inject IPostManager PostManager
@using System.Text.Json
@using SEP3_Tier1Blazor_WASM.Authentication

<ModalUserList @ref=@userListModal/>
@if (user != null)
{
    <div class="container">
        <header style="background-image: url(@bgSrc)">
            <AuthorizeView Resource="@id" Policy="CurrentLogged">
                <InputFile OnChange="OnInputFileChanged"/>
            </AuthorizeView>
        </header>
        <main>
            <div class="row">
                <div class="left col-lg-4" style="max-height: 500px;">
                    <div class="photo-left">
                        <img class="profile-avatar" src=@avatarSrc/>
                    </div>
                    <h4 class="name">@user.Name</h4>
                    <p class="info link" @onclick=ShowGymsInTheCity>@user.City</p>

                    @if (user.Address != null)
                    {
                        <p class="info">@user.Address.Street @user.Address.Number</p>
                    }

                    <div class="stats row">
                        <div class="stat col-xs-4" style="padding-right: 50px;">
                            <p class="number-stat">@user.FriendsNumber</p>
                            @if (user.Address != null)
                            {
                                <p class="desc-stat link" @onclick=OpenFriendList>Followers</p>
                            }
                            else
                            {
                                if (!user.UserStatus[0])
                                {
                                    <AuthorizeView Resource="@id" Policy="CurrentLogged">
                                        <NotAuthorized>
                                            <p class="desc-stat link" @onclick=OpenFriendList>Common Friends</p>
                                        </NotAuthorized>
                                        <Authorized>
                                            <p class="desc-stat link" @onclick=OpenFriendList>Friends</p>
                                        </Authorized>
                                    </AuthorizeView>
                                }
                                else
                                {
                                    <p class="desc-stat link" @onclick=OpenFriendList>Friends</p>
                                }
                            }
                        </div>
                        <div class="stat col-xs-4">
                            <p class="number-stat">@posts.Count</p>
                            <p class="desc-stat">Posts</p>
                        </div>
                        <div class="stat col-xs-4" style="padding-left: 50px;">
                            <p class="number-stat">@user.Score</p>
                            <p class="desc-stat">Points</p>
                        </div>
                    </div>
                    <p class="desc">@user.Description</p>

                    @if (user.Address != null)
                    {
                        var i = 0;
                        <div>
                            @for (i = 0; i < user.Rating; i++)
                            {
                                int temp = i;
                                <span class="fa fa-star checked" style="color: orange" @onclick="e => RatePage(temp)"></span>
                            }

                            @for (var j = i; j < 5; j++)
                            {
                                int temp = j;
                                <span class="fa fa-star" @onclick="e => RatePage(temp)"></span>
                            }
                            
                        </div>
                        
                    }
                    
                    <div>
                           @if (user.UserStatus[3] || user.Id == currentLogged.UserId)
                                            {
                                                <button class="btn-sm btn scheduler-button" @onclick="OpenUserScheduler">Scheduler</button>
                                            }
                        
                                            @if (user.UserStatus[4] || user.Id == currentLogged.UserId)
                                            {
                                                <button class="btn-sm btn scheduler-button"@onclick="OpenUserDiets">Diets</button>
                                            }
                        
                                            @if (user.UserStatus[0] || user.UserStatus[5])
                                            {
                                                <button class="btn-sm btn scheduler-button" @onclick="OpenChat">Chat</button>
                                            }
                    </div>


                </div>
                <div class="right col-lg-8">
                    <div class="row profile-options-box">
                        @if (!currentLogged.AccountType.Equals("Administrator"))
                        {
                            if (user.Address != null)
                            {
                                <AuthorizeView Policy="PageOwner">
                                    <NotAuthorized>
                                        @if (!user.UserStatus[5])
                                        {
                                            <button class="btn-sm btn scheduler-button" @onclick=@(e => InteractWithUser(UserActionTypes.USER_FOLLOW_PAGE, true))>Follow</button>
                                        }
                                        else
                                        {
                                            <button class="btn-sm btn scheduler-button" @onclick=@(e => InteractWithUser(UserActionTypes.USER_FOLLOW_PAGE, false))>Unfollow</button>
                                        }

                                    </NotAuthorized>
                                </AuthorizeView>
                            }

                            if (user.Address == null)
                            {
                                if (user.UserStatus[0])
                                {
                                    <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_FRIEND_REMOVE, true))>Cancel friendship</button>
                                }
                                else if (user.UserStatus[6])
                                {
                                    <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_FRIEND_REQUEST_RESPONSE, true))>Confirm friendship</button>
                                    <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_FRIEND_REQUEST_RESPONSE, false))>Discard friendship</button>
                                }
                                else if (user.UserStatus[1])
                                {
                                    <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_FRIEND_REQUEST_SEND, false))>Cancel friend request</button>
                                }
                                else
                                {
                                    <AuthorizeView Resource="@id" Policy="CurrentLogged">
                                        <NotAuthorized>
                                            <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_FRIEND_REQUEST_SEND, true))>Add Friend</button>
                                        </NotAuthorized>
                                    </AuthorizeView>
                                }
                            }
                        }


                    </div>
                    @if (!currentLogged.AccountType.Equals("Administrator"))
                    {
                        <AuthorizeView Resource="@id" Policy="CurrentLogged">
                            <Authorized>
                                <button class="btn-sm btn scheduler-button"@onclick=OnDeleteAccount>Delete Account</button>
                            </Authorized>
                            <NotAuthorized>
                                @if (user.UserStatus[2])
                                {
                                    <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_REPORT, user.UserStatus[2]))>Cancel user report</button>
                                }
                                else
                                {
                                    <button class="btn-sm btn scheduler-button"@onclick=@(e => InteractWithUser(UserActionTypes.USER_REPORT, user.UserStatus[2]))>Report user</button>
                                }
                            </NotAuthorized>
                        </AuthorizeView>

                        <AuthorizeView Resource="@id" Policy="CurrentLogged">

                            @if (currentLogged.AccountType.Equals("PageOwner"))
                            {
                                <PostCreator OnPostCreated="NewPostCreated"/>
                            }
                        </AuthorizeView>
                    }

                    @if (user.UserStatus[0] || user.Id == currentLogged.UserId || user.UserStatus[5])
                    {
                        if (!reloadPostList)
                        {
                            foreach (var post in posts)
                            {
                                <Post PostID="post" OnPostDelete=@LoadPosts/>
                            }
                        }
                    }
                </div>
            </div>
        </main>
    </div>
}


@code {

    [CascadingParameter]
    public ModalException ModalException { get; set; }
    [Parameter]
    public string UserArgument { get; set; }

    private List<int> posts;
    private User user;
    private int id;
    private string avatarSrc;
    private string bgSrc;
    private bool reloadPostList;
    private ModalUserList userListModal;
    private UserShortVersion currentLogged;

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("initializeComponent", DotNetObjectReference.Create(this));
        posts = new List<int>();
        string[] tempUser = UserArgument.Split('.');
        if (tempUser.Length == 3)
            id = Int32.Parse(tempUser[2]);
        if (tempUser.Length == 2)
            id = Int32.Parse(tempUser[1]);
        currentLogged = StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync());

        try
        {
        if(currentLogged.AccountType.Equals("Administrator"))
        {
            user = await UserManger.GetUser(id, id);
        }
        else
        {
            user = await UserManger.GetUser(currentLogged.UserId, id);
        }
        
            await LoadPosts();

            avatarSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(user.Avatar));
            bgSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(user.ProfileBackground));
        }
        catch
        {
            ModalException.Open();
        }
    }
    
    /// <summary>
    /// Sends a request to delete an account
    /// </summary>
    private async Task OnDeleteAccount()
    {
        try
        {
            ((CustomAuthenticationStateProvider) Authentication).Logout();
            await UserManger.RemoveUser(id);
            NavigationManager.NavigateTo("/");
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Sets and displays a given images
    /// </summary>
    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        User editedUser = new User();
        editedUser.Id = id;
        editedUser.ProfileBackground = await FileUpload.ConvertFile(files.FirstOrDefault());

        try
        {
            await UserManger.EditUser(editedUser, currentLogged);
            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Opens friend list
    /// </summary>
    private async Task OpenFriendList()
    {
    try
    {
        userListModal.Title = $"{user.Name}'s friends";
        userListModal.ListType = "FriendList";
        userListModal.CurrentLoggedId = currentLogged.UserId;
        userListModal.UserId = user.Id;
        await userListModal.LoadUsersWithoutStatus();
        userListModal.Open();
    }
    catch
    {
        ModalException.Open();
    }
    }

    /// <summary>
    /// Sends a request to interact with other user base on option selected by user
    /// </summary>
    private async Task InteractWithUser(UserActionTypes action, bool value)
    {
        try
        {
            switch (action)
            {
                case UserActionTypes.USER_REPORT:
                    await UserManger.InteractWithUser(currentLogged.UserId, user.Id, UserActionTypes.USER_REPORT, !value);
                    user.UserStatus[2] = !value;
                    break;
                case UserActionTypes.USER_FRIEND_REMOVE:
                    await UserManger.InteractWithUser(currentLogged.UserId, user.Id, UserActionTypes.USER_FRIEND_REMOVE, true);
                    user.UserStatus[0] = false;
                    user.FriendsNumber--;
                    break;
                case UserActionTypes.USER_FOLLOW_PAGE:
                    await JS.InvokeVoidAsync("sendFriendRequest", JsonSerializer.Serialize(new UserAction {SenderId = currentLogged.UserId, ReceiverId = user.Id, ActionType = UserActionTypes.USER_FOLLOW_PAGE.ToString(), Value = value, SenderName = currentLogged.UserFullName}));
                    user.UserStatus[5] = value;
                    break;
                case UserActionTypes.USER_FRIEND_REQUEST_SEND:
                    await JS.InvokeVoidAsync("sendFriendRequest", JsonSerializer.Serialize(new UserAction {SenderId = currentLogged.UserId, ReceiverId = user.Id, ActionType = UserActionTypes.USER_FRIEND_REQUEST_SEND.ToString(), Value = value, SenderName = currentLogged.UserFullName}));
                    user.UserStatus[1] = value;
                    break;
                case UserActionTypes.USER_FRIEND_REQUEST_RESPONSE:
                    await UserManger.InteractWithUser(user.Id, currentLogged.UserId, UserActionTypes.USER_FRIEND_REQUEST_RESPONSE, value);
                    if (value)
                    {
                        user.UserStatus[0] = true;
                        user.FriendsNumber++;
                    }

                    else
                    {
                        user.UserStatus[6] = false;
                    }

                    break;
            }

            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Shows gyms in the user's city
    /// </summary>
    private async Task ShowGymsInTheCity()
    {
        try
        {
            userListModal.Users = await UserManger.GetGymsInTheCity(user.City);
            userListModal.Title = $"Gyms in the {user.City}";
            userListModal.ListType = "GymsList";
            userListModal.CurrentLoggedId = currentLogged.UserId;
            userListModal.UserId = user.Id;
            userListModal.Open();
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Loads more posts after receiving javascript request
    /// </summary>
    [JSInvokable("LoadMorePosts")]
    public async Task LoadPosts()
    {
        try
        {
            List<int> temp = await PostManager.GetPostByUser(user.Id, posts.Count);
            if (temp != null)
            {
                foreach (var post in temp)
                {
                    posts.Add(post);
                }
                if (posts.Count > 0 && temp.Count != 0)
                {
                    await JS.InvokeAsync<string>("setLastPostId", posts.ToList().Last());
                }
                else
                {
                    await JS.InvokeAsync<string>("setLastPostId", null);
                }
            }
            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
     
    }

    /// <summary>
    /// Displays a new created post with a given id
    /// <param name="id">The id of a new post</param>
    /// </summary>
    private void NewPostCreated(int newId)
    {
        reloadPostList = true;
        StateHasChanged();

        posts.Insert(0, newId);
        reloadPostList = false;
        StateHasChanged();
    }

    /// <summary>
    /// Navigates to user's scheduler
    /// </summary>
    private void OpenUserScheduler()
    {
        NavigationManager.NavigateTo($"profile/{UserArgument}/scheduler");
    }
    
    /// <summary>
    /// Navigates to user's diet
    /// </summary>
    private void OpenUserDiets()
    {
        NavigationManager.NavigateTo($"profile/{UserArgument}/diet");
    }

    /// <summary>
    /// Navigates to chat with selected user
    /// </summary>
    private void OpenChat()
    {
        NavigationManager.NavigateTo($"chat/{UserArgument}/");
    }
    
    /// <summary>
    /// Sends a request to rate a page with a given value
    /// <param name="value">The value for rating</param>
    /// </summary>
    private void RatePage(int value)
    {
        if (!user.UserStatus[7])
        {
        
            UserManger.InteractWithUser(currentLogged.UserId, user.Id, UserActionTypes.USER_RATE_PAGE, value+1);
        }
    }
}