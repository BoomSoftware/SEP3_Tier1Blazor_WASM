@page "/Chat/"
@page "/Chat/{UserArgument}/"
@using System.Text.Json
@attribute [Authorize]
@inject AuthenticationStateProvider Authentication
@inject IChatManager ChatManager
@inject IJSRuntime JS
@inject IFileUpload FileUpload
@inject IUserManger UserManger
@inject NavigationManager NavigationManager

<div class="row content-row justify-content-center">
    <div class="conversation-list col-4">
        @foreach (var user in conversations)
        {
            <ConversationBox User="@user"/>
        }
        <div class="btn-light btn-sm" @onclick=LoadMoreConversations>Load More</div>
    </div>

    <div class="col-6 ">
        <div class="receiver d-flex align-items-center">
            @if (selectedUser != null)
            {
                 <img class="img" style="width: 4vh; border-radius: 20px;" src="@StaticFunctions.GetUserAvatar(selectedUser)" alt="avatar"/>
                <div class="" style="margin-left: 10px">
                    @selectedUser.UserFullName
                </div>
            }
        </div>

        <div class="conversation-box" id="conversation">
            @if(conversation != null)
            {
             foreach (var message in conversation)
                        {
                            <MessageBox MessageModel="@message" CurrentLogged="@currentLogged" OtherUser="@selectedUser" />
                        }
            }
            else
                        {
                            <div>Loading...</div>
                        }
           
        </div>

        <div class="message-creator d-flex align-items-center">
            <div>
                <input type="text" size="45" @onkeyup=SendMessage @bind=@newMessage.Content placeholder="Type here..."/>
                <label for="file-upload" class="custom-file-upload">
                                    <svg style="width: 2em; height: 2em; color: white; border: 0" viewBox="0 0 16 16" class="bi bi-file-earmark-image" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M12 16a2 2 0 0 0 2-2V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8zM3 2a1 1 0 0 1 1-1h5.5v2A1.5 1.5 0 0 0 11 4.5h2V10l-2.083-2.083a.5.5 0 0 0-.76.063L8 11 5.835 9.7a.5.5 0 0 0-.611.076L3 12V2z"/>
                                        <path fill-rule="evenodd" d="M6.502 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/>
                                    </svg>
                                </label>
                <InputFile OnChange="OnInputFileChanged" id="file-upload"/>

            </div>

            @if (newMessage.HasImage)
            {
                <div class="creator-img col-4">
                    <button class="remove-img-button" @onclick="RemovePicture">Remove</button>
                    <img class="img-fluid" style="border-radius: 20px;" src="@pictureSrc" alt="image"/>
                </div>
            }
        </div>
    </div>

</div>

@code {

    [CascadingParameter]
    public ModalException ModalException { get; set; }
    [Parameter]
    public string UserArgument { get; set; }

    private UserShortVersion currentLogged;
    private string pictureSrc;
    private int receiverId;
    private int userId;
    private UserShortVersion selectedUser;
    private MessageWithSender newMessage = new MessageWithSender();
    private List<UserSVWithMessage> conversations = new List<UserSVWithMessage>();
    private List<MessageModel> conversation;
    private bool messageReload;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentLogged = StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync());
            await JS.InvokeVoidAsync("connectChat", DotNetObjectReference.Create(this), currentLogged.UserId);
            await JS.InvokeVoidAsync("initializeComponent", DotNetObjectReference.Create(this), currentLogged.UserId);
            await LoadChat();
        }
        catch
        {
            ModalException.Open();
        }
      
        
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await JS.InvokeAsync<string>("scrollToBottom", "conversation");
    }

    /// <summary>
    /// Loads conversation based on the parameters
    /// </summary>
    private async Task LoadChat()
    {
        try
        {
            conversation = new List<MessageModel>();
            if (UserArgument != null)
            {
                string[] tempUser = UserArgument.Split('.');
                if (tempUser.Length == 3)
                    userId = Int32.Parse(tempUser[2]);
                if (tempUser.Length == 2)
                    userId = Int32.Parse(tempUser[1]);
                receiverId = userId;
                conversation = await ChatManager.GetConversationWithUser(currentLogged.UserId, userId, conversation.Count);
                if (conversation != null && conversation.Any())
                {
                    await JS.InvokeAsync<string>("setLastPostId", conversation[0].Id);
                }
            }
            var temp = await ChatManager.GetUsersFromConversations(currentLogged.UserId, conversations.Count);
            if (temp != null && temp.Any())
            {
                conversations = temp;
            }

            if (UserArgument != null)
                selectedUser = await UserManger.GetUserShortVersion(receiverId);
        }
        catch
        {
            ModalException.Open();
        }
       
    }

    /// <summary>
    /// Loads more posts after receiving javascript request
    /// </summary>
    [JSInvokable("LoadMorePosts")]
    public async Task LoadMoreMessages()
    {Console.WriteLine("Insert1");
        var temp = await ChatManager.GetConversationWithUser(currentLogged.UserId, userId, conversation.Count);
        Console.WriteLine("Insert2");
        foreach (var message in temp)
        {
            conversation.Insert(0, message);
            Console.WriteLine("Insert3");
        }
        await JS.InvokeAsync<string>("setLastPostId", conversation[0].Id);
        StateHasChanged();
    }

    /// <summary>
    /// Displays new message received and update a view
    /// </summary>
    [JSInvokable("NewMessageReceived")]
    public async Task NewMessageReceived(string message)
    {
        Console.WriteLine("XXXXXXXXXXXXXXXXXXX111111111111111111");
        MessageModel tempNewMessage;
        if (message != null)
        {
            tempNewMessage = JsonSerializer.Deserialize<MessageModel>(message);

            if (currentLogged.UserId == newMessage.SenderId)
            {
                newMessage.Id = tempNewMessage.Id;
                if (conversation.Any())
                {
                    if (conversation[0].ReceiverId == newMessage.SenderId || conversation[0].SenderId == newMessage.SenderId)
                    {
                        conversation.Add(newMessage);
                        StateHasChanged();
                    }
                }
                else
                {
                    Console.WriteLine("XXXXXXXXXXXXXXXXXXX");
                }

                for (var i = 0; i < conversations.Count; i++)
                {
                    if (conversations[i].UserId == newMessage.SenderId || conversations[i].UserId == newMessage.ReceiverId)
                    {
                        conversations[i].LastMessage.Content = newMessage.Content;
                        conversations[i].MessageUnread = true;

                        var updated = conversations[i];
                        conversations.Remove(updated);
                        conversations.Insert(0, updated);
                        Console.WriteLine("update left side");
                        StateHasChanged();
                    }
                }
            }
            else
            {
                Console.WriteLine("Blazor recived message1");
                if (conversation.Any())
                {
                    Console.WriteLine("Blazor recived message2 senderID");
                    if (conversation[0].ReceiverId == tempNewMessage.SenderId || conversation[0].SenderId == tempNewMessage.SenderId)
                    {
                        Console.WriteLine("Blazor recived message3");
                        conversation.Add(tempNewMessage);
                        StateHasChanged();
                    }
                }

                for (var i = 0; i < conversations.Count; i++)
                {
                    if (conversations[i].UserId == tempNewMessage.SenderId || conversations[i].UserId == tempNewMessage.ReceiverId)
                    {
                        conversations[i].LastMessage.Content = tempNewMessage.Content;
                        conversations[i].MessageUnread = true;

                        var updated = conversations[i];
                        conversations.Remove(updated);
                        conversations.Insert(0, updated);
                        Console.WriteLine("update left side");
                        StateHasChanged();
                    }
                }
            }
            newMessage = new MessageWithSender();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Sends a message to a current open conversation
    /// </summary>
    private async Task SendMessage(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            newMessage.SenderId = currentLogged.UserId;
            newMessage.ReceiverId = receiverId;
            newMessage.SenderName = currentLogged.UserFullName;

            await JS.InvokeAsync<string>("sendMessage", JsonSerializer.Serialize(newMessage));
            if(!conversation.Any())
                NavigationManager.NavigateTo($"chat/{UserArgument}/",true);
        }
    }

    /// <summary>
    /// Sets and displays image uploaded by a user
    /// </summary>
    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        byte[] messageImage = await FileUpload.ConvertFile(files.FirstOrDefault());
        newMessage.HasImage = true;
        newMessage.Picture = messageImage;
        pictureSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(messageImage));
        StateHasChanged();
    }

    /// <summary>
    /// Sends a delete message request
    /// </summary>
    [JSInvokable("MessageDeleted")]
    public async Task MessageDeleted(string message)
    {
        MessageModel tempMessage = JsonSerializer.Deserialize<MessageModel>(message);
        conversation.First(e => e.Id == tempMessage.Id).Content = "Message has been deleted";
        conversation.First(e => e.Id == tempMessage.Id).Picture = null;
        StateHasChanged();
        Console.WriteLine("Message deleted in blazor");
    }

    /// <summary>
    /// Removes uploaded image
    /// </summary>
    private void RemovePicture()
    {
        newMessage.HasImage = false;
        newMessage.Picture = null;
        pictureSrc = "";
        StateHasChanged();
    }

    /// <summary>
    /// Load more conversations to the view
    /// </summary>
    private async Task LoadMoreConversations()
    {
        try
        {
            var temp = await ChatManager.GetUsersFromConversations(currentLogged.UserId, conversations.Count);
            if (temp != null)
            {
                foreach (var c in temp)
                {
                    conversations.Add(c);
                }
            }
            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
      
    }
}