@using SEP3_Tier1Blazor_WASM.Data
@using SEP3_Tier1Blazor_WASM.Data.UserData
@using SEP3_Tier1Blazor_WASM.Models
@using SEP3_Tier1Blazor_WASM.Authentication
@using SEP3_Tier1Blazor_WASM.Models.UserModels
@inject NavigationManager NavigationManager
@inject IUserManger UserManger
@inject AuthenticationStateProvider Authentication

<div class="login-popup">
    <a class="close" style="cursor: pointer" @onclick=CloseComponent>&times;</a>
    <h2>Welcome</h2>
    <div class="content">
        <EditForm OnValidSubmit=SendLoginRequest Model="login">
            <DataAnnotationsValidator />
            <ValidationSummary />
            
            <InputText class="form-input" placeholder="Email" @bind-Value="login.Email" @onkeypress=HideErrorMessage/>
            <InputText type="password" class="form-input" placeholder="Password" style="border-bottom: 5px;" @bind-Value="login.Password" @onkeypress=HideErrorMessage/>

            <input type="submit" class="form-button" value="Login"/>
            <p class="message">Not registered? <a @onclick=OpenRegisterPage>Create an account</a></p>
            @if (errorVisibility)
            {
                <p class="error-message" style="background-color: red">No users found</p>
            }
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback CloseComponent { get; set; }

    private Login login = new Login();
    private bool errorVisibility = false;

    private void OpenRegisterPage()
    {
        NavigationManager.NavigateTo("/registration");
    }

    private async void SendLoginRequest()
    {
        try
        {
            await ((CustomAuthenticationStateProvider) Authentication).Login(login);

            string authRole = Authentication.GetAuthenticationStateAsync().Result.User.Claims.First(c => c.Type.Equals("AccountType")).Value;
            string authName = Authentication.GetAuthenticationStateAsync().Result.User.Claims.First(c => c.Type.Equals("Name")).Value;
            string authId = Authentication.GetAuthenticationStateAsync().Result.User.Claims.First(c => c.Type.Equals("Id")).Value;
            
            if (authRole.Equals("Administrator"))
            {
                NavigationManager.NavigateTo("/admindashboard");
            }
            else if(authRole.Equals("PageOwner"))
            {
                string uri = StaticFunctions.GetUserUri(authName);
                NavigationManager.NavigateTo($"/profile/{uri}.{authId}/");
            }
            else
            {
                NavigationManager.NavigateTo("/fitnesswall");
            }
                
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorVisibility = true;
            StateHasChanged();
        }
    }

    private void HideErrorMessage()
    {
        errorVisibility = false;
    }

}