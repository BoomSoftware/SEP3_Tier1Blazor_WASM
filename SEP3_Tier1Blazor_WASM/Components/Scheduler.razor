@using System.Globalization
@using System.Threading
@using System.ComponentModel
@using SEP3_Tier1Blazor_WASM.Components.Modals
@inject IJSRuntime JS;


@trainingsRender
<Modal @ref="@modal"/>
<ModalTrainingCreator @ref="@modalCreator"/>
<div class="container-fluid">
    <table class="table table-bordered scheduler">
        <thead>
        <tr>
            <th scope="col" class="@dayCss"></th>
            @for (int i = 0; i < DaysInWeek; i++)
            {
                <th scope="col">@dayNames[i]</th>
            }
        </tr>
        </thead>
        <tbody>

        @for (int i = 0; i < (EndHour - StartHour); i++)
        {
            <tr>
                <th scope="row" class="scheduler-time">@(StartHour + i):00</th>
                @for (int j = 0; j < DaysInWeek; j++)
                {
                    string dayInWeek = dayNames[j];
                    int hour = StartHour + i;
                    <td id="@(dayNames[j] + '-' + (StartHour + i))" @onclick=@(() => OpenTrainingCreator(dayInWeek, hour))></td>
                }
            </tr>
        }
        </tbody>
    </table>
</div>


@code {

    [Parameter]
    public int DaysInWeek { get; set; }

    [Parameter]
    public int StartHour { get; set; }

    [Parameter]
    public int EndHour { get; set; }

    private Modal modal;
    private ModalTrainingCreator modalCreator;
    private DotNetObjectReference<Scheduler> objectReference;


    private string[] dayNames = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
    private int weekNumber;
    private CultureInfo myCI = new CultureInfo("en-US");
    private Calendar myCal;
    private RenderFragment trainingsRender;
    private List<TrainingModel> trainingModels;
    private string dayCss;
    private string id;

    protected override async Task OnInitializedAsync()
    {
        myCal = myCI.Calendar;
        weekNumber = myCal.GetWeekOfYear(DateTime.Today, CalendarWeekRule.FirstFullWeek, DayOfWeek.Friday);
        Console.WriteLine("Week number: " + weekNumber);

        if (DaysInWeek == 5)
            dayCss = "five-days";
        if (DaysInWeek == 7)
            dayCss = "seven-days";


        trainingModels = new List<TrainingModel>();
    //get trainings for a given week
        DateTime dateTime = DateTime.Now;

        TimeSpan time1 = new TimeSpan(8, 0, 0);
        TimeSpan time2 = new TimeSpan(12, 0, 0);

        dateTime = dateTime.Date + time1;
        trainingModels.Add(new TrainingModel {DurationInMinutes = 90, IsCompleted = true, TimeStamp = dateTime, Title = "Full body training", Color = "#f6b067"});

        dateTime = dateTime.Date + time2;
        trainingModels.Add(new TrainingModel {DurationInMinutes = 120, IsCompleted = false, TimeStamp = dateTime, Title = "Stretching", Color = "#443453"});

@*         trainingsRender = @<div> *@
@*                               @foreach (var training in trainingModels) *@
@*                               { *@
@*                                   await SetTrainingStyle(training); *@
@* *@
@*     //SetTrainingStyle(training); *@
@*                                   <div class="training" style="@trainingCss"> *@
@*                                       <h3>@training.Title</h3> *@
@*                                   </div> *@
@*                               } *@
@*                           </div>; *@
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetTrainingsPosition();
            objectReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("resizeScheduler", objectReference);
           
        }
    }

    [JSInvokableAttribute("RefreshScheduler")]
    public async Task SetTrainingsPosition()
    {
        Console.WriteLine("XXXXXXXXXXXXXXXXXXXXx");
        foreach (var training in trainingModels)
        {
              string elementId = $"{training.TimeStamp.DayOfWeek}-{training.TimeStamp.Hour}";
                     Console.WriteLine("elementid: " + elementId);
                     var top = await JS.InvokeAsync<double>("getElementTop", elementId);
                     var left = await JS.InvokeAsync<double>("getElementLeft", elementId);
                     var width = await JS.InvokeAsync<double>("getElementWidth", elementId);

                     int height = training.DurationInMinutes;

                     if (training.TimeStamp.Minute > 0)
                     {
                         top += training.TimeStamp.Minute;
                     }

                     string trainingCss = $"top: {top}px; left:{left}px; min-height:{height}px; max-height:{height}px; width:{width}px; background-color: {training.Color}";


                     trainingsRender += @<div @onclick=modal.Open>
                                            <div class="scheduler-training" style="@trainingCss">
                                                <p class="scheduler-training-time">@training.TimeStamp.ToString("HH:mm") - @training.TimeStamp.AddMinutes(training.DurationInMinutes).ToString("HH:mm")</p>
                                                <div class="col-12">
                                                    <h3 class="scheduler-training-title">@training.Title</h3>
                                                </div>
                                            </div>
                                        </div>;

                     Console.WriteLine("XXXXXXXXXXXXXXXXXXXXx");
                    StateHasChanged();
        }
    }


    private void OpenTrainingCreator(string day, int hour)
    {
        Console.WriteLine(day + hour);
        DateTime dateTime = FirstDateOfWeekISO8601(day);
        TimeSpan timeSpan = new TimeSpan(hour, 0, 0);
        dateTime = dateTime.Date + timeSpan;

        modalCreator.DateTime = dateTime;
        modalCreator.Open();
    }

    public DateTime FirstDateOfWeekISO8601(string day)
    {
        DateTime jan1 = new DateTime(DateTime.Today.Year, 1, 1);
        int daysOffset = DayOfWeek.Thursday - jan1.DayOfWeek;

        DateTime firstThursday = jan1.AddDays(daysOffset);
        var cal = CultureInfo.CurrentCulture.Calendar;
        int firstWeek = cal.GetWeekOfYear(firstThursday, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

        var weekNum = weekNumber;
        if (firstWeek == 1)
            weekNum -= 1;


        var result = firstThursday.AddDays(weekNum * 7);
        int dayNumber = -1;
        switch (day)
        {
            case "Monday":
                dayNumber = 0;
                break;
            case "Tuesday":
                dayNumber = 1;
                break;
            case "Wednesday":
                dayNumber = 2;
                break;
            case "Thursday":
                dayNumber = 3;
                break;
            case "Friday":
                dayNumber = 4;
                break;
            case "Saturday":
                dayNumber = 6;
                break;
            case "Sunday":
                dayNumber = 7;
                break;
        }
        return result.AddDays(-3 + dayNumber);
    }

}