@using System.Text
@using SEP3_Tier1Blazor_WASM.Data
@using SEP3_Tier1Blazor_WASM.Data.UserData
@using SEP3_Tier1Blazor_WASM.Models
@using System.ComponentModel
@using System.Text.Json
@using SEP3_Tier1Blazor_WASM.Authentication
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider Authentication
@inject IJSRuntime JS;
<audio id="notificationSound" src="/sound/notification.mp3"/>
<nav class="mb-1 navbar navbar-expand-lg navbar-dark secondary-color lighten-1">
    <a class="navbar-brand" href="#">Navbar</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent-555"
            aria-controls="navbarSupportedContent-555" aria-expanded="false" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="#">
                    Home
                    <span class="sr-only">(current)</span>
                </a>
            </li>
           
            <li class="nav-item avatar dropdown">
                <a class="nav-link dropdown-toggle" @onclick=ToggleNotificationMenu data-toggle="dropdown"
                   aria-haspopup="true" aria-expanded="false">
                    Notifications @notificationsModels.Count
                </a>
                <div class="@NotificationsCssClass">
                    @foreach (var notification in notificationsModels)
                    {
                        <Notification Model="notification"/>
                    }
                </div>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Pricing</a>
            </li>
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" data-toggle="dropdown"
                   aria-haspopup="true" aria-expanded="false">
                    Dropdown
                </a>
                <div class="dropdown-menu dropdown-secondary" aria-labelledby="navbarDropdownMenuLink-555">
                    <a class="dropdown-item" href="#">Action</a>
                    <a class="dropdown-item" href="#">Another action</a>
                    <a class="dropdown-item" href="#">Something else here</a>
                </div>
            </li>
        </ul>
        <ul class="navbar-nav ml-auto nav-flex-icons">
            <li class="nav-item">
                <a class="nav-link waves-effect waves-light">
                    <i class="fas fa-envelope"></i>
                </a>
            </li>
            @if (avatarSrc != null)
            {
                <li class="nav-item avatar dropdown">
                    <a class="nav-link dropdown-toggle" data-toggle="dropdown"
                       aria-haspopup="true" aria-expanded="false">
                        <img src=@avatarSrc class="rounded-circle z-depth-0"
                             alt="avatar image" width="100" height="100" @onclick=ToggleAvatarMenu>
                    </a>
                    <div class="@AvatarMenuCssClass">
                        <a class="dropdown-item" @onclick=OpenProfileView>Profile</a>
                        <a class="dropdown-item" @onclick=OpenEditAccountView>Edit Account</a>
                        <a class="dropdown-item" @onclick=Logout>Logout</a>
                    </div>
                </li>
            }

        </ul>
    </div>
</nav>

@code {
    private string searchValue;
    private RenderFragment CustomRender { get; set; }
    bool searchVisible = false;
    private IList<User> users;
    private string avatarSrc;
    private IList<NotificationModel> notificationsModels;
    private UserShortVersion loggedUser;

    bool collapseNavMenu = true;
    bool collapseAvatarMenu = false;
    bool collapseNotification = false;

    string baseMenuClass = "navbar-collapse";
    string baseAvatarMenuClass = "dropdown-menu dropdown-menu-lg-right dropdown-secondary";
    string baseNotificationMenuClass = "dropdown-menu dropdown-menu-lg-right dropdown-secondary pre-scrollable notification-dropdown";

    string NotificationsCssClass => baseNotificationMenuClass + (collapseNotification ? " show" : "");
    string NavMenuCssClass => baseMenuClass + (collapseNavMenu ? " collapse" : "");
    string AvatarMenuCssClass => baseAvatarMenuClass + (collapseAvatarMenu ? " show" : "");


    protected override async Task OnInitializedAsync()
    {
        notificationsModels = new List<NotificationModel>();
        if (loggedUser == null)
        {
            loggedUser = StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync());

            await JS.InvokeVoidAsync("connect", DotNetObjectReference.Create(this), loggedUser.UserId);
        }
        avatarSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(loggedUser.Avatar));


        StateHasChanged();
    }

    private async void SearchUsers()
    {
        if (users != null && users.Count > 0)
            searchVisible = true;
        StateHasChanged();
    }


    private void OpenProfileView(User user)
    {
        NavigationManager.NavigateTo("profile/" + StaticFunctions.GetUserUri(user.Name) + "." + user.Id + "/");
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleAvatarMenu()
    {
        collapseAvatarMenu = !collapseAvatarMenu;
    }

    private void ToggleNotificationMenu()
    {
        collapseNotification = !collapseNotification;
    }

    private void OpenEditAccountView()
    {
        NavigationManager.NavigateTo($"profile/{StaticFunctions.GetUserUri(loggedUser.UserFullName)}.{loggedUser.UserId}/edit");
    }

    private void OpenProfileView()
    {
        NavigationManager.NavigateTo($"profile/{StaticFunctions.GetUserUri(loggedUser.UserFullName)}.{loggedUser.UserId}/");
    }


    [JSInvokable("ShowFriendRequest")]
    public async Task ShowFriendRequest(string notification)
    {
        NotificationModel notificationModel = JsonSerializer.Deserialize<NotificationModel>(notification);
        notificationModel.Content = "sent you a friend invitation";

        notificationsModels.Insert(0,notificationModel);
        Console.WriteLine("Blazor" + notification);

        await NotificationReceived();
        StateHasChanged();
    }

    private void Logout()
    {
        ((CustomAuthenticationStateProvider) Authentication).Logout();
        NavigationManager.NavigateTo("/");
    }


    private async Task NotificationReceived()
    {
        await JS.InvokeAsync<string>("playNotificationSound");
        await JS.InvokeAsync<string>("updatePageTitle", notificationsModels.Count);
    }

}