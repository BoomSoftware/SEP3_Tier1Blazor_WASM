@using SEP3_Tier1Blazor_WASM.Data.TrainingData
@using System.Globalization

@inject ITrainingManager TrainingManager
@inject IUserManger UserManger
@inject AuthenticationStateProvider Authentication

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" style="overflow: auto">
            <div class="modal-header">
                @if (!isEditMode)
                {
                    if (TrainingModel.IsPublic)
                    {
                        <label class="text-muted" style="font-size: 11px;margin-right: 5px;">Public</label>
                    }
                    else
                    {
                        <label class="text-muted" style="font-size: 11px; margin-right: 5px;">Private</label>
                    }
                    <br>
                    <h5 class="modal-title">@TrainingModel.Title</h5>
                }
                else
                {
                    <input type="text" @bind="editedTraining.Title"/>
                }


                <button type="button" class="close">
                    @if (IsOwner)
                    {
                        <button class="btn btn-sm btn-dark" @onclick=EnableEditMode>Edit</button>
                        <button class="btn btn-sm btn-dark" @onclick=OnDeleteTraining>Delete</button>
                    }
                </button>

            </div>
            <div class="modal-body">
                <div class="training-info">
                    @if (IsOwner)
                    {
                        <div>
                            @if (TrainingModel.IsCompleted)
                            {
                                <label>Training completed</label>
                            }
                            else
                            {
                                <label>Complete</label>
                                <input type="checkbox" @bind="TrainingModel.IsCompleted" @onclick="MakeTrainingComplete"/>
                            }
                        </div>
                    }


                    @if (!isEditMode)
                    {
                        <div>
                            <h7 class="sub-title">Type: @TrainingModel.Type</h7>
                        </div>
                        <div>
                            <h7 class="">Duration: @TrainingModel.DurationInMinutes min</h7>
                        </div>
                    }
                    else
                    {
                        <div>
                            <input type="text" @bind="editedTraining.Type"/>
                        </div>
                        <div>
                            <input type="number" @bind="editedTraining.DurationInMinutes"/>
                        </div>
                    }


                </div>


                @foreach (var exercise in exercises)
                {
                    <Exercise ExerciseModel="@exercise" trainingId="@TrainingModel.Id" IsOwner="@IsOwner"/>
                }
            </div>

            @if (IsOwner)
            {
                <div class="">
                    <div class="" style="width: 50%; margin: auto; text-align: center">
                        <label>Add new exercise </label><button class="toggle-button" @onclick=ToggleCreator>+</button>
                    </div>

                    @if (isAddingMode)
                    {
                        <EditForm Model="newExercise" OnValidSubmit="CreateNewExercise">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <div style="margin-left: 10px">
                                <div >
                                    <label>Title</label><InputText type="text" @bind-Value="newExercise.Title"/>
                                </div>
                                <div>
                                    <label>Description</label><InputText type="text" @bind-Value="newExercise.Description"/>
                                </div>

                                <button class="btn btn-sm btn-dark" type="submit">Create</button>
                            </div>

                        </EditForm>
                    }

                </div>
            }

            <div class="modal-footer">
                @if (isEditMode)
                {
                    <button class="btn btn-sm btn-dark" @onclick="ConfirmEdit">Confirm</button>
                    <button class="btn btn-sm btn-dark" @onclick="CancelEdit">Cancel</button>
                    <label style="color: red">@errorMessage</label>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick=Close>Close</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Parameter]
    public int TrainingId { get; set; }

    [Parameter]
    public bool IsOwner { get; set; }

    [Parameter]
    public EventCallback<int> DeleteTrainingEvent { get; set; }

    private TrainingWithOwner TrainingModel;
    private TrainingWithOwner editedTraining = new TrainingWithOwner();
    private bool isEditMode;
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;
    private List<ExerciseModel> exercises;
    private ExerciseModel newExercise = new ExerciseModel();
    private UserShortVersion currentLogged;
    private bool isAddingMode;
    private string errorMessage = "";
    
    protected override async Task OnInitializedAsync()
    {
        currentLogged = StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync());
        TrainingModel = new TrainingWithOwner();
        TrainingModel.Exercises = new List<ExerciseModel>();
        exercises = new List<ExerciseModel>();
    }
    
    /// <summary>
    /// Opens popup box for managing training
    /// </summary>
    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    
    /// <summary>
    /// Closes popup box
    /// </summary>
    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        isAddingMode = false;
        isEditMode = false;
        StateHasChanged();
    }
    
    /// <summary>
    /// Enables edit mode for selected training
    /// </summary>
    private void EnableEditMode()
    {
        isEditMode = true;
        editedTraining = TrainingModel;
        StateHasChanged();
    }
    
    /// <summary>
    /// Deletes training and informs parent component and sends request to lower layer
    /// </summary>
    private async Task OnDeleteTraining()
    {
        try
        {
            await TrainingManager.DeleteTraining(TrainingModel.Id);
            await DeleteTrainingEvent.InvokeAsync(TrainingModel.Id);
            Close();
        }
        catch
        {
        }
    }
    
    /// <summary>
    /// Confirms edit with new information and sends request to lower layer
    /// </summary>
    private async Task ConfirmEdit()
    {
        try
        {
            if (ValidateEdit())
            {
                 await TrainingManager.EditTraining(editedTraining);
                TrainingModel = editedTraining;
                isEditMode = false;
            }
           
        }
        catch
        {
        }
    }
    
    /// <summary>
    /// Closes edit mode
    /// </summary>
    private void CancelEdit()
    {
        isEditMode = false;
        StateHasChanged();
    }
    
    /// <summary>
    /// Creates and adds new exercise to a selected training and sends request to lower layer
    /// </summary>
    private async Task CreateNewExercise()
    {
        try
        {
            int tempId = await TrainingManager.AddExerciseToTraining(TrainingId, newExercise);
            newExercise.Id = tempId;
            exercises.Add(newExercise);
            StateHasChanged();
        }
        catch
        {
        }
    }
    
    /// <summary>
    /// Sets training as completed and sends request to lower layer
    /// </summary>
    private async Task MakeTrainingComplete()
    {
        try
        {
            TrainingModel.IsCompleted = true;
            await TrainingManager.EditTraining(TrainingModel);
            await UserManger.IncrementScore(currentLogged.UserId, 10);
            StateHasChanged();
        }
        catch
        {
        }
    }
    
    /// <summary>
    /// Loads training using an Id given as a parameter
    /// </summary>
    public async Task LoadTraining()
    {
        TrainingModel = await TrainingManager.GetTrainingById(TrainingId);
        exercises = TrainingModel.Exercises;
    }
    
    /// <summary>
    /// Displays and hides a form responsible for creating a new exercise
    /// </summary>
    private void ToggleCreator()
    {
        isAddingMode = !isAddingMode;
    }
    
    /// <summary>
    /// Validates information given by an user
    /// </summary>
    private bool ValidateEdit()
    {
        if (String.IsNullOrEmpty(editedTraining.Title))
        {
            errorMessage = "Title can not be empty";
            return false;
        }

        if (String.IsNullOrEmpty(editedTraining.Type))
        {
            errorMessage = "Type can not be empty";
            return false;
        }
        
        if (editedTraining.DurationInMinutes < 0 && editedTraining.DurationInMinutes > 540)
        {
            errorMessage = "Duration time must be between 1 and 540";
            return false;
        }
        return true;
    }

}