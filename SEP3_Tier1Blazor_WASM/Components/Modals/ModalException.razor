@using SEP3_Tier1Blazor_WASM.Authentication
@inject AuthenticationStateProvider Authentication
@inject NavigationManager NavigationManager

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Connection error</h5>
            </div>
            <div class="modal-body">
                @if (ReloadException)
                {
                    <label>One or more trainings can not be displayd in the scheduler. Please change scheduler settings and reload page</label>
                    <button @onclick=Close>Close</button>
                }
                else
                {
                    <label>Connection to the server has been lost unexpectedly. You will be automatically logged out. Please try again in a few minutes.</label>
                    <button @onclick=ConfirmException>Confirm</button>
                }
                
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter] public bool ReloadException { get; set; }
    
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    /// <summary>
    /// Open popup box responsible for inform user about unexpected error
    /// </summary>
    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    
    /// <summary>
    /// Closes popup box
    /// </summary>
    private void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    
    /// <summary>
    /// Approves error and navigates user to a home page
    /// </summary>
    private void ConfirmException()
    {
        Close();
        ((CustomAuthenticationStateProvider)Authentication).Logout();
        NavigationManager.NavigateTo("/");
        StateHasChanged();
    }
}

