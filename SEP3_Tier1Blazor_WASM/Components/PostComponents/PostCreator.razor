@using System.Security.Cryptography
@using SEP3_Tier1Blazor_WASM.Models.Post
@using SEP3_Tier1Blazor_WASM.Models.UserModels
@inject AuthenticationStateProvider Authentication
@inject IFileUpload FileUpload
@inject IPostManager PostManager
<div class="post-creator">
    <div class="row">
        <div class="col-6 d-flex align-self-center">
            <label>@errorMessage</label>
            
            <h2>Create your post</h2>
        </div>
        <div class="col-6 d-flex justify-content-end">
            <button class="toggle-button" @onclick=ToggleCreator>+</button>
        </div>
    </div>
    <div class="row">
         <div class="content">
             <EditForm OnValidSubmit=CreatePost Model="postShortVersion">
                  <DataAnnotationsValidator />
                  <ValidationSummary />
                 
                 
                 @if (isCreationProcess)
                 {
                     <InputText class="form-input" placeholder="Title" id="title" @bind-Value="postShortVersion.Title"/>
                     <InputTextArea class="form-input" placeholder="Content" id="content" @bind-Value="postShortVersion.Content"/>
                    
                     
                     <label for="file-upload" class="custom-file-upload">
                         <svg style="width: 2em; height: 2em; color: black; border: 0" viewBox="0 0 16 16" class="bi bi-file-earmark-image" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                             <path fill-rule="evenodd" d="M12 16a2 2 0 0 0 2-2V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8zM3 2a1 1 0 0 1 1-1h5.5v2A1.5 1.5 0 0 0 11 4.5h2V10l-2.083-2.083a.5.5 0 0 0-.76.063L8 11 5.835 9.7a.5.5 0 0 0-.611.076L3 12V2z"/>
                             <path fill-rule="evenodd" d="M6.502 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/>
                         </svg>
                     </label>
                     <InputFile OnChange="OnInputFileChanged" id="file-upload"/>
                     if (postShortVersion.Picture != null)
                     {
                         <div class="creator-img col-4">
                                 <button class="remove-img-button" @onclick="RemovePicture">Remove</button>
                                 <img class="img-fluid" style="border-radius: 20px;" src="@postImgSrc" alt="image"/>
                             </div>
@*                          <img src="@postImgSrc" alt="PostImage" width="200" height="100"/> *@
                     }
                     <input type="submit" class="form-button" value="Create Post"/>
                 }
             </EditForm>
            </div>
    </div>
   
</div>

@code {

    [Parameter]
    public EventCallback<int> OnPostCreated { get; set; }
    
    [CascadingParameter]
    public ModalException ModalException { get; set;}
    
    private PostShortVersion postShortVersion;
    private UserShortVersion currentLogged;
    private string postImgSrc;
    private bool isCreationProcess = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        postShortVersion = new PostShortVersion();
        currentLogged = StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync());
    }

    private async Task CreatePost()
    {
        postShortVersion.Owner = currentLogged;
        if (postImgSrc == null || !postImgSrc.Equals(""))
            postShortVersion.HasImage = false;
        else
            postShortVersion.HasImage = true;
        try{
            await OnPostCreated.InvokeAsync(await PostManager.AddNewPost(postShortVersion));
            postShortVersion = new PostShortVersion();
        }
        catch{
             ModalException.Open();
        }
    }

    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        byte[] postImage = await FileUpload.ConvertFile(files.FirstOrDefault());
        postShortVersion.Picture = postImage;
        postImgSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(postImage));
        StateHasChanged();
    }

    private void ToggleCreator()
    {
        isCreationProcess = !isCreationProcess;
        StateHasChanged();
    }
    
    private void RemovePicture()
    {
        postShortVersion.Picture = null;
        postImgSrc = "";
        StateHasChanged();
    }

}