@using System.Text
@using SEP3_Tier1Blazor_WASM.Data
@using SEP3_Tier1Blazor_WASM.Data.PostingData
@using SEP3_Tier1Blazor_WASM.Data.UserData
@using SEP3_Tier1Blazor_WASM.Models
@using SEP3_Tier1Blazor_WASM.Models.Post
@using SEP3_Tier1Blazor_WASM.Models.UserModels
@inject NavigationManager NavigationManager
@inject IUserManger UserManger
@inject IPostManager PostManager
@inject AuthenticationStateProvider Authentication;
@inject IFileUpload FileUpload


<ModalUserList @ref="@modalUserList"/>
@if (PostData == null)
{
    <p>Loading post</p>
}
else
{
    if (!isDelete)
    {
        <div class="post" id="@PostID">
            <div class="post-header">
                <div class="row">
                    <div class="col-6">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="mr-2">
                                    <img class="rounded-circle" width="45" src="@avatarImgSrc" alt="">
                                </div>
                                <div class="ml-2">
                                    <div class="h5 m-0 link" @onclick=@(e => OpenAuthorProfile(PostData.Owner))> @PostData.Owner.UserFullName</div>
                                    <div class="h7 text-muted">@PostData.CreationTime</div>
                                </div>
                            </div>
                            <div>
                            </div>
                        </div>
                    </div>
                    <div class="col-6 d-flex justify-content-end">


                        <img src="/img/options.png" alt="options" width="30" height="30" class="link" @onclick=TogglePostOptions>
                        <div class="@OptionsCssClass without-focus-style">
                            <AuthorizeView Resource="GetAuthorizedString(PostData.Owner.UserId)" Policy="CurrentLogged/Owner/Admin">
                                <Authorized>
                                    <a class="dropdown-item link" @onclick=StartEditMode>Edit</a>
                                    <a class="dropdown-item link" @onclick=DeletePost>Delete</a>
                                </Authorized>
                                <NotAuthorized>
                                    @if (!PostData.PostStatus[1])
                                    {
                                        <a class="dropdown-item link" @onclick=@(e => OnReportAction(true))>Report</a>
                                    }
                                    else
                                    {
                                        <a class="dropdown-item link" @onclick=@(e => OnReportAction(false))>Unreport</a>
                                    }
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>

                    </div>
                </div>

            </div>
            <div class="post-body">
                @if (isEditMode)
                {
                    <EditForm Model="EditPost" OnValidSubmit="ConfirmEdit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <InputText type="text" class="post-edit-input" @bind-Value=@EditPost.Title />
                        <InputTextArea @bind-Value=@EditPost.Content class="post-edit-content post-edit-input"></InputTextArea>

                        <button type="submit" class="post-edit-button">Confirm</button>
                    </EditForm>
                }
                else
                {
                    <h5 class="post-title">
                        @PostData.Title
                    </h5>

                    <p class="post-content">
                        @PostData.Content
                    </p>
                }

                @if (PostData.Picture != null)
                {
                    <img class="img-fluid" src="@pictureSrc"/>

                    if (isEditMode)
                    {
                        <InputFile OnChange="OnInputFileChanged"/>
                        <br>
                    }
                }

                @if (isEditMode)
                {
                    <button @onclick=CancelEdit class="post-edit-button">Cancel</button>
                }

            </div>
            <div class="post-footer">
                <div class="row">
                    <div class="col-6">
                        @if (!PostData.PostStatus[0])
                        {
                            <i class="link" @onclick=@(e => OnReactionButton(true))>Like</i>
                        }
                        else
                        {
                            <i class="link" @onclick=@(e => OnReactionButton(false))>Unlike</i>
                        }

                        <i class="link" @onclick=ShowCommentSection>Comment (@PostData.CommentNumber)</i>
                    </div>
                    <div class="col-6 d-flex justify-content-end">
                        <img src="/img/muscle-liked.png" @onclick=OpenReactionList alt="like" width="20" height="20"/>
                        <p> @PostData.LikeNumber</p>
                    </div>
                </div>


                @if (commentSectionVisibility)
                {
                    if (currentLogged.Avatar != null)
                    {
                        <div class="row" style="margin-bottom: 30px;margin-top: 10px;">
                            <div class="col-1">
                                <img src="@StaticFunctions.GetUserAvatar(currentLogged)" class="rounded-circle" width="45"/>
                            </div>
                            <input class="col-9 comment-input" type="text" placeholder="Write your comment here" @bind=commentContent @onkeyup=SendComment />
                            <label style="color: red">@errorMessage</label>
                        </div>
                    }


                    foreach (var comment in PostData.Comments)
                    {
                        <div class="h7 text-muted comment-time">@comment.CreationTime</div>
                        <div class="row comment-body">
                            <div class="col-1 d-flex align-self-center">
                                <img src=@StaticFunctions.GetUserAvatar(comment.Owner) class="rounded-circle " width="45"/>
                            </div>
                            <div class="col-9 comment-content">
                                <div class="comment-author link" @onclick=@(e => OpenAuthorProfile(comment.Owner))> @comment.Owner.UserFullName</div>
                                <p>@comment.Content</p>
                                <AuthorizeView Resource="GetAuthorizedString(comment.Owner.UserId)"Policy="CurrentLogged/Owner/Admin">
                                    <i class="link comment-option" @onclick=@(e => RemoveComment(comment.Id))>Delete</i>
                                </AuthorizeView>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
}

@code {
    [CascadingParameter]
    public ModalException ModalException { get; set; }

    [Parameter]
    public int PostID { get; set; }

    [Parameter]
    public EventCallback OnPostDelete { get; set; }

    private PostShortVersion PostData;
    private PostShortVersion EditPost;
    private ModalUserList modalUserList;
    private string avatarImgSrc;
    private string reactionSrc = "img/muscule-like.png";
    private bool commentSectionVisibility = false;
    private bool optionsVisibility = false;
    private bool isEditMode = false;
    private bool isDelete = false;
    private string commentContent = "";
    private UserShortVersion currentLogged;
    private string pictureSrc;
    private string errorMessage = "";
    string baseMenuClass = "navbar-collapse";
    string basePostMenuClass = "dropdown-menu dropdown-menu-lg-right dropdown-secondary";
    string OptionsCssClass => basePostMenuClass + (optionsVisibility ? " show" : "");

    protected override async Task OnInitializedAsync()
    {
    try
    {
        currentLogged = StaticFunctions.GetLoggedUser(await Authentication.GetAuthenticationStateAsync());
        Console.WriteLine("Postid" + PostID);
        PostData = await PostManager.GetPostById(PostID, currentLogged.UserId);
        EditPost = PostData;
        avatarImgSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(PostData.Owner.Avatar));
        if (PostData.Picture != null)
            pictureSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(PostData.Picture));
        reactionSrc = "img/muscule-liked.png";
    }
    catch
    {
        ModalException.Open();
    }
    }
    
    /// <summary>
    /// Navigates to a selected user profile
    /// </summary>
    private void OpenAuthorProfile(UserShortVersion user)
    {
        string path = StaticFunctions.GetUserUri(user.UserFullName);
        NavigationManager.NavigateTo($"profile/{path}.{user.UserId}/", true);
    }
    
    /// <summary>
    /// Shows post's comment section
    /// </summary>
    private async Task ShowCommentSection()
    {
        PostData.Comments = await PostManager.GetPostComments(PostID);
        commentSectionVisibility = !commentSectionVisibility;
        StateHasChanged();
    }
    
    /// <summary>
    /// Converts image from byte array to a string which can be used by a browser
    /// </summary>
    private void ConvertPostImage()
    {
        pictureSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(PostData.Picture));
    }
    
    /// <summary>
    /// Sends a request to add a new comment and displays it in a comment section
    /// </summary>
    private async Task SendComment(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!String.IsNullOrEmpty(commentContent))
            {
                 Comment comment = new Comment {Content = commentContent, Owner = currentLogged, CreationTime = DateTime.Now};
                            try
                            {
                                int newCommentId = await PostManager.AddCommentToPost(PostID, comment);
                                comment.Id = newCommentId;
                                PostData.Comments.Insert(0, comment);
                                PostData.CommentNumber++;
                                commentSectionVisibility = true;
                                commentContent = "";
                                errorMessage = "";
                                StateHasChanged();
                            }
                            catch (Exception)
                            {
                                ModalException.Open();
                            }
            }
            else
            {
                errorMessage = "Comment can not be empty";
            }
           
        }
    }
    
    /// <summary>
    /// Shows and hides option list
    /// </summary>
    private void TogglePostOptions()
    {
        optionsVisibility = !optionsVisibility;
    }
    
    /// <summary>
    /// Enables post edit mode
    /// </summary>
    private void StartEditMode()
    {
        TogglePostOptions();
        isEditMode = true;
    }
    
    /// <summary>
    /// Loads an image given in a FileText input
    /// </summary>
    private async Task OnInputFileChanged(IFileListEntry[] files)
    {
        byte[] postImage = await FileUpload.ConvertFile(files.FirstOrDefault());
        EditPost.Picture = postImage;
        pictureSrc = String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(postImage));
        StateHasChanged();
    }

    /// <summary>
    /// Sends a request to a lower layer to edit a comment and displays updated version
    /// </summary>
    private async Task ConfirmEdit()
    {
        try
        {
            await PostManager.EditPost(EditPost);
            PostData.Content = EditPost.Content;
            PostData.Title = EditPost.Title;
            if (EditPost.Picture != null)
                PostData.Picture = EditPost.Picture;
            CancelEdit();
        }
        catch
        {
            ModalException.Open();
        }
    }
    
    /// <summary>
    /// Cancels edit mode
    /// </summary>
    private void CancelEdit()
    {
        isEditMode = false;
        StateHasChanged();
    }

    /// <summary>
    /// Sends a request to a lower layer for deleting post and remove it from view
    /// </summary>
    private async Task DeletePost()
    {
        try
        {
            TogglePostOptions();
            await PostManager.RemovePost(PostID);
            isDelete = true;

            if (OnPostDelete.HasDelegate)
                await OnPostDelete.InvokeAsync(PostID);
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Sends a request to a lower layer fro deleting a comment add removes it from a comment section
    /// <param name="id">The given id of a comment</param>
    /// </summary>
    private async Task RemoveComment(int id)
    {
        try
        {
            await PostManager.RemoveCommentFromPost(id);
            var comments = PostData.Comments.ToList();
            comments.RemoveAll(e => e.Id == id);
            PostData.Comments = comments;
            PostData.CommentNumber--;
            commentSectionVisibility = true;
            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Creates a string for the authorized view's parameter
    /// <param name="commentOwnerId">The given id of a comment owner</param>
    /// </summary>
    private string GetAuthorizedString(int commentOwnerId)
    {
        return PostData.Owner.UserId + "." + commentOwnerId;
    }

    /// <summary>
    /// Opens reaction list with all users reacted to the selected post
    /// </summary>
    private async Task OpenReactionList()
    {
        try
        {
            List<UserShortVersion> users = await PostManager.GetPostReactions(PostID);
            if (users.Count > 0)
            {
                modalUserList.Users = users;
                modalUserList.Title = "People who like this post";
                modalUserList.Open();
            }
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Adds reaction to a selected post or removes if it was added before
    /// </summary>
    private async Task OnReactionButton(bool value)
    {
        try
        {
            await PostManager.InteractWithPost(PostID, currentLogged.UserId, UserActionTypes.POST_LIKE, value);
            if (value)
            {
                PostData.LikeNumber++;
                PostData.PostStatus[0] = true;
            }
            else
            {
                PostData.LikeNumber--;
                PostData.PostStatus[0] = false;
            }

            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
    }

    /// <summary>
    /// Reports selected post or remove report if it was reported before
    /// </summary>
    private async Task OnReportAction(bool value)
    {
        try
        {
            await PostManager.InteractWithPost(PostID, currentLogged.UserId, UserActionTypes.POST_REPORT, value);
            if (value)
                PostData.PostStatus[1] = true;
            else
                PostData.PostStatus[1] = false;
            StateHasChanged();
        }
        catch
        {
            ModalException.Open();
        }
    }

}